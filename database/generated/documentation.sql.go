// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: documentation.sql

package repository

import (
	"context"
)

const addDocumentation = `-- name: AddDocumentation :one
INSERT INTO "documentation" (
    "ownerId", "name", "public", "repoOwner", "repoName", "repoRef",
    "root", "pathPrefix", "highlightStyle", "fullPage", "useTailwind"
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) RETURNING "id"
`

type AddDocumentationParams struct {
	OwnerId        int32  `json:"ownerId"`
	Name           string `json:"name"`
	Public         bool   `json:"public"`
	RepoOwner      string `json:"repoOwner"`
	RepoName       string `json:"repoName"`
	RepoRef        string `json:"repoRef"`
	Root           string `json:"root"`
	PathPrefix     string `json:"pathPrefix"`
	HighlightStyle string `json:"highlightStyle"`
	FullPage       bool   `json:"fullPage"`
	UseTailwind    bool   `json:"useTailwind"`
}

func (q *Queries) AddDocumentation(ctx context.Context, arg AddDocumentationParams) (int32, error) {
	row := q.db.QueryRow(ctx, addDocumentation,
		arg.OwnerId,
		arg.Name,
		arg.Public,
		arg.RepoOwner,
		arg.RepoName,
		arg.RepoRef,
		arg.Root,
		arg.PathPrefix,
		arg.HighlightStyle,
		arg.FullPage,
		arg.UseTailwind,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const countUserDocumentations = `-- name: CountUserDocumentations :one
SELECT COUNT(*) FROM "documentation" WHERE "ownerId" = $1
`

func (q *Queries) CountUserDocumentations(ctx context.Context, ownerid int32) (int64, error) {
	row := q.db.QueryRow(ctx, countUserDocumentations, ownerid)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getDocumentationById = `-- name: GetDocumentationById :one
SELECT id, "ownerId", name, public, "repoOwner", "repoName", "repoRef", root, "pathPrefix", "highlightStyle", "fullPage", "useTailwind" FROM "documentation" WHERE "id" = $1
`

func (q *Queries) GetDocumentationById(ctx context.Context, id int32) (Documentation, error) {
	row := q.db.QueryRow(ctx, getDocumentationById, id)
	var i Documentation
	err := row.Scan(
		&i.ID,
		&i.OwnerId,
		&i.Name,
		&i.Public,
		&i.RepoOwner,
		&i.RepoName,
		&i.RepoRef,
		&i.Root,
		&i.PathPrefix,
		&i.HighlightStyle,
		&i.FullPage,
		&i.UseTailwind,
	)
	return i, err
}

const getDocumentationByName = `-- name: GetDocumentationByName :one
SELECT id, "ownerId", name, public, "repoOwner", "repoName", "repoRef", root, "pathPrefix", "highlightStyle", "fullPage", "useTailwind" FROM "documentation" WHERE "name" = $1
`

func (q *Queries) GetDocumentationByName(ctx context.Context, name string) (Documentation, error) {
	row := q.db.QueryRow(ctx, getDocumentationByName, name)
	var i Documentation
	err := row.Scan(
		&i.ID,
		&i.OwnerId,
		&i.Name,
		&i.Public,
		&i.RepoOwner,
		&i.RepoName,
		&i.RepoRef,
		&i.Root,
		&i.PathPrefix,
		&i.HighlightStyle,
		&i.FullPage,
		&i.UseTailwind,
	)
	return i, err
}

const getUserDocumentations = `-- name: GetUserDocumentations :many
SELECT id, "ownerId", name, public, "repoOwner", "repoName", "repoRef", root, "pathPrefix", "highlightStyle", "fullPage", "useTailwind" FROM "documentation" WHERE "ownerId" = $1
`

func (q *Queries) GetUserDocumentations(ctx context.Context, ownerid int32) ([]Documentation, error) {
	rows, err := q.db.Query(ctx, getUserDocumentations, ownerid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Documentation
	for rows.Next() {
		var i Documentation
		if err := rows.Scan(
			&i.ID,
			&i.OwnerId,
			&i.Name,
			&i.Public,
			&i.RepoOwner,
			&i.RepoName,
			&i.RepoRef,
			&i.Root,
			&i.PathPrefix,
			&i.HighlightStyle,
			&i.FullPage,
			&i.UseTailwind,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeDocumentation = `-- name: RemoveDocumentation :exec
DELETE FROM "documentation" WHERE "id" = $1
`

func (q *Queries) RemoveDocumentation(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, removeDocumentation, id)
	return err
}

const transferDocumentation = `-- name: TransferDocumentation :exec
UPDATE "documentation" SET "ownerId" = $2 WHERE "id" = $1
`

type TransferDocumentationParams struct {
	ID      int32 `json:"id"`
	OwnerId int32 `json:"ownerId"`
}

func (q *Queries) TransferDocumentation(ctx context.Context, arg TransferDocumentationParams) error {
	_, err := q.db.Exec(ctx, transferDocumentation, arg.ID, arg.OwnerId)
	return err
}

const updateDocumentation = `-- name: UpdateDocumentation :exec
UPDATE "documentation" SET
    "name" = $2,
    "public" = $3,
    "repoOwner" = $4,
    "repoName" = $5,
    "repoRef" = $6,
    "root" = $7,
    "pathPrefix" = $8,
    "highlightStyle" = $9,
    "fullPage" = $10,
    "useTailwind" = $11
WHERE "id" = $1
`

type UpdateDocumentationParams struct {
	ID             int32  `json:"id"`
	Name           string `json:"name"`
	Public         bool   `json:"public"`
	RepoOwner      string `json:"repoOwner"`
	RepoName       string `json:"repoName"`
	RepoRef        string `json:"repoRef"`
	Root           string `json:"root"`
	PathPrefix     string `json:"pathPrefix"`
	HighlightStyle string `json:"highlightStyle"`
	FullPage       bool   `json:"fullPage"`
	UseTailwind    bool   `json:"useTailwind"`
}

func (q *Queries) UpdateDocumentation(ctx context.Context, arg UpdateDocumentationParams) error {
	_, err := q.db.Exec(ctx, updateDocumentation,
		arg.ID,
		arg.Name,
		arg.Public,
		arg.RepoOwner,
		arg.RepoName,
		arg.RepoRef,
		arg.Root,
		arg.PathPrefix,
		arg.HighlightStyle,
		arg.FullPage,
		arg.UseTailwind,
	)
	return err
}
